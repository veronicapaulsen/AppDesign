{
  "name": "rc4",
  "version": "0.1.5",
  "description": "RC4 random number generator",
  "main": "rc4.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:phadej/rc4.git"
  },
  "keywords": [
    "rc4",
    "random",
    "generator",
    "seed"
  ],
  "author": {
    "name": "Oleg Grenrus",
    "email": "oleg.grenrus@iki.fi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/phadej/rc4/issues"
  },
  "homepage": "https://github.com/phadej/rc4",
  "devDependencies": {
    "david": "^6.1.4",
    "eslint": "^0.19.0",
    "istanbul": "^0.3.6",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "readme": "# rc4\n\n[RC4](http://en.wikipedia.org/wiki/RC4) random number generator\n\n[![Build Status](https://secure.travis-ci.org/phadej/rc4.svg?branch=master)](http://travis-ci.org/phadej/rc4)\n[![NPM version](https://badge.fury.io/js/rc4.svg)](http://badge.fury.io/js/rc4)\n[![Dependency Status](https://gemnasium.com/phadej/rc4.svg)](https://gemnasium.com/phadej/rc4)\n[![Code Climate](https://img.shields.io/codeclimate/github/phadej/rc4.svg)](https://codeclimate.com/github/phadej/rc4)\n\n## Synopsis\n\n```js\nvar RC4 = require(\"rc4\");\n\nvar generator = new RC4(\"my seed\"); // string or array of integers\n// without the seed RNG is seeded with random data from Math.random\n\n// byte := integer ∈ [0, 255]\nconsole.log(generator.randomByte());\n\n// float := number ∈ [0, 1)\nconsole.log(generator.randomFloat());\n\n// save & load state\nvar state = generator.currentState();\nconsole.log(generator.randomFloat()); // 0.14815412228927016\ngenerator.setState(state);\nconsole.log(generator.randomFloat()); // 0.14815412228927016\n```\n\n## RC4small\n\nThere is also `RC4small` generator, with smaller internal state:\n\n```\nvar RC4small = require(\"rc4\").RC4small;\n\nvar generator = new RC4small(\"my seed\");\n\nvar stateString = generator.currentStateString(); // 18 character hexadecimal string\nconsole.log(generator.randomFloat());  // 0.9362740234937519\ngenerator.setStateString(stateString);\nconsole.log(generator.randomFloat()); // 0.9362740234937519\n```\n\n## API\n\nBoth `RC4` and `RC4small` have following random value generating methods:\n\n```\nrandomByte   : () ⇒ { x : ℕ | x ∈ [0, 255] }\nrandomUInt32 : () ⇒ { x : ℕ | x ∈ [0, 2^32-1] }\nrandomFloat  : () ⇒ { x : R | x ∈ [0, 1) }\nrandom       : (a : ℤ)        ⇒ { x : ℤ | x ∈ [0, a] }\nrandom       : (a : ℤ, b : ℤ) ⇒ { x : ℤ | x ∈ [a, b] }\n```\n\n## Changelog\n\n- **0.1.5** &mdash; *2015-04-24* &mdash; Better isInteger, random works with bigger ranges\n- **0.1.4** &mdash; *2015-02-25* &mdash; Dev dependencies update\n",
  "readmeFilename": "README.md",
  "_id": "rc4@0.1.5",
  "dist": {
    "shasum": "4d3114ee5139e4492579e6b7e2d8825c3b040a88"
  },
  "_from": "rc4@~0.1.5",
  "_resolved": "https://registry.npmjs.org/rc4/-/rc4-0.1.5.tgz"
}
